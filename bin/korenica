#! /usr/bin/python
# -*- coding: utf-8 -*-
"""Generates hang gliding competition results based on rules devised 
specifically for Ljubomir Tomašković Memorial Competition held traditionally 
in Korenica, Croatia.
"""

__author__ = "Davor Bokun"
__copyright__ = "Copyright (C) 2012-2014 Davor Bokun <bokundavor@gmail.com>"
__credits__ = ["Davor Bokun"]
__license__ = "GPL"
__version__ = '1.4'
__maintainer__ = "Davor Bokun"
__email__ = "bokundavor@gmail.com"
__status__ = "Production"


import sys

if __name__!='__main__':
    # Do not allow importing as module
    sys.exit()
    

try:
    import campus
except ImportError:
    import os
    pymodules_path = os.path.join(os.path.dirname(__file__),
                                  '../share/pyshared/korenica')
    sys.path.append(pymodules_path)

from igcutils import IGCReader
from campus import CampusTask
from taskpack import pack_methods
import argparse

parser = argparse.ArgumentParser(

description='\
generate hang gliding competition results based on rules devised especially \
for Ljubomir Tomašković Memorial Competition held traditionally in Korenica, \
Croatia.',

epilog='NOTE: Although this program is licensed under GPL the actual \
rules it implements are not. To use these rules for a competition or \
distribute them you have to acquire a permission from the author \
(Davor Bokun <bokundavor@gmail.com>). Please contact the author for \
more details.',
add_help=False
)

subparsers = parser.add_subparsers(dest='command')

parser_process = subparsers.add_parser('process', help='standard processing command')
process_options = parser_process.add_argument_group('processing options')
process_options.add_argument('input_igc', type=str, 
                              metavar='input.igc',
                              help='input igc track log file')
process_options.add_argument('output_kml', type=str, 
                              metavar='output.kml', nargs='?', 
                              help='output task track kml file')
process_options.add_argument('--task-file', default=argparse.SUPPRESS,
                                help='use specific task file for kml output') 

# csv command options
parser_csv = subparsers.add_parser('csv', help='generating csv output')
csv_options = parser_csv.add_argument_group('processing options')
csv_options.add_argument('input_igc', type=str, 
                         metavar='input.igc', nargs='?', 
                         help='input igc track log file')
csv_options.add_argument('output_kml', type=str,
                         metavar='output.kml', nargs='?', 
                         help='output task track kml file')
csv_options.add_argument('--task-file', default=argparse.SUPPRESS,
                            help='use specific task file for kml output') 
csv_options.add_argument('--header', action='store_true',
                            help='print column headers in csv format') 

# task command options
parser_task = subparsers.add_parser('task', 
                                    help='managing task files') 
task_options = parser_task.add_argument_group('options')
task_options.add_argument('--init', type=str, default=argparse.SUPPRESS,
                             metavar='TASK_FILE', nargs='?',
                             help='initialize task definition file') 
task_options.add_argument('--output-kml', type=str, default=argparse.SUPPRESS,
                             metavar='OUTPUT_FILE', nargs='?',
                             help='output task cylinders to kml file')
task_options.add_argument('--task-file', default=argparse.SUPPRESS,
                             help='use specific task file for kml output') 
task_options.add_argument('--verbose', action='store_true',
                            help='send task to stdout') 

# packing command options
parser_pack = subparsers.add_parser('pack', 
                                    help='package tracks and tasks') 
pack_options = parser_pack.add_argument_group('options')
pack_options.add_argument('--task-file', default=argparse.SUPPRESS,
                             help='use specific task file') 
pack_options.add_argument('--track-suffix', type=str, default='.igc',
                             metavar='TRACK_SUFFIX',
                             help='suffix used to match track IGC files')
pack_options.add_argument('--task-suffix', type=str, default='-task.kml',
                             metavar='TASK_SUFFIX',
                             help='suffix used to match task KML files')
pack_options.add_argument('--task-poly-suffix', type=str, default='-task-poly.kml',
                             metavar='TASK_POLY_SUFFIX',
                             help='suffix used to match task polygon KML files')
pack_options.add_argument('--pack-type', type=str, default='json',
                             metavar='TYPE',
                             help='package type (default: JSON)')
pack_options.add_argument('output_package', type=str, default='task.json',
                           metavar='PACKAGE_FILE', nargs='?',
                           help='output package file')

# group standard options 
other_group = parser.add_argument_group('other options')
other_group.add_argument('-v', '--version', action='version', 
                         version='%(prog)s version ' + __version__)
other_group.add_argument('-h', '--help', action='help',
                         help='show this help message and exit')


args = parser.parse_args()

task = None
if 'task_file' in args:
    try:
        task = CampusTask.from_file(args.task_file)
    except:
        print 'Warning: Unable to load task definition file. Using default...'

if task is None:
    task = CampusTask([ (44.704578, 15.819669,  2.0, 'Startni cilindar'),
                        (44.871002, 15.632666, 20.0, '1. cilindar Plitvice'),
                        (44.604398, 15.417794, 28.0, '2. cilindar Licki Osik - kolodvor'),
                        (44.554233, 15.957067, 20.0, '3. cilindar Donji Lapac'),
                        (44.706733, 15.793550,  0.4, 'Cilj na pg sletistu')])

if args.command=='process':
    print '#'*44
    print '# Processing: %s' % args.input_igc

    igc = IGCReader(args.input_igc)

    print 'Track Points:', len(igc.track)
    
    track = task.process(igc)

    print '\nCourse coordinates:'
    print '\n'.join(map(lambda x: '%.5f %.5f' % x, track.waypoints))
    print
    print 'Total distance: %.2f km (avg.speed %.2f km/h)' % (track.total_distance, track.avg_speed*3600)
    print 'In goal:', track.in_goal
    print 'Goal penalty: %.2f km' % track.goal_penalty
    print 'Time penalty: %.2f km (for %.1f seconds)' % (track.time_penalty, track.penalty_seconds)
    print 'Task score: %.1f points' % track.score
    print 'Area bonus: %.1f points (%.2f%%)' % (track.score*track.poly_coef, track.poly_coef*100.)
    print 'Total score: %.1f points' % (track.score * (1.0 + track.poly_coef))


    if args.output_kml is not None:
        track.export_kml(args.output_kml)
        track.export_poly_kml(args.output_kml[:-4]+'_poly.kml')
    

elif args.command=='csv':
    if args.header:
        print "'filename', 'Distance [km]', 'Speed [km/h]', 'Penalty time [s]', \
'Time penalty distance [km]', 'In goal', 'Penalty distance [km]', \
'Task points', 'Area coef.', 'Area bonus', 'Total score';"
    else:
        igc = IGCReader(args.input_igc)
        track = task.process(igc)
        
        print "'%s'," % args.input_igc, track
        
        if args.output_kml is not None:
            track.export_kml(args.output_kml)
            track.export_poly_kml(args.output_kml[:-4]+'_poly.kml')


elif args.command=='task':
    if 'init' in args:
        task_file = 'my_task.cfg'
        if args.init is not None:
            task_file = args.init
        task.save(task_file)
    if 'output_kml' in args:
        output_file = 'task_cylinders.kml'
        if args.output_kml is not None:
            output_file = args.output_kml
        task.export_kml(output_file)
    if args.verbose or not ('init' in args or 'output_kml' in args):
        print str(task)


elif args.command=='pack':
    if args.pack_type in pack_methods:
      pack_methods[args.pack_type](task, args)
